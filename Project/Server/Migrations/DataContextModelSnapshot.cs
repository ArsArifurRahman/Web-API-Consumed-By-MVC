// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Server.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            FirstName = "Stephen",
                            LastName = "King"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            FirstName = "J.K.",
                            LastName = "Rowling"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            FirstName = "Margaret",
                            LastName = "Atwood"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            FirstName = "Tim",
                            LastName = "Winton"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            FirstName = "Arundhati",
                            LastName = "Roy"
                        });
                });

            modelBuilder.Entity("Server.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Isbn = "9781501142970",
                            PublishedAt = new DateTimeOffset(new DateTime(1986, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Title = "It"
                        },
                        new
                        {
                            Id = 2,
                            Isbn = "9780747532743",
                            PublishedAt = new DateTimeOffset(new DateTime(1997, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Title = "Harry Potter and the Philosopher's Stone"
                        },
                        new
                        {
                            Id = 3,
                            Isbn = "9780385490818",
                            PublishedAt = new DateTimeOffset(new DateTime(1985, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Title = "The Handmaid's Tale"
                        },
                        new
                        {
                            Id = 4,
                            Isbn = "9780330412388",
                            PublishedAt = new DateTimeOffset(new DateTime(1991, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Title = "Cloudstreet"
                        },
                        new
                        {
                            Id = 5,
                            Isbn = "9780006550686",
                            PublishedAt = new DateTimeOffset(new DateTime(1997, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 6, 0, 0, 0)),
                            Title = "The God of Small Things"
                        });
                });

            modelBuilder.Entity("Server.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5
                        });
                });

            modelBuilder.Entity("Server.Models.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            BookId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            BookId = 5,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("Server.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Children's"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mystery"
                        });
                });

            modelBuilder.Entity("Server.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 2,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 5,
                            Name = "India"
                        });
                });

            modelBuilder.Entity("Server.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Headline = "Terrifying Read",
                            Rating = 5,
                            ReviewText = "Stephen King's 'It' is a terrifying journey into the depths of fear.",
                            ReviewerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            Headline = "Magical Adventure",
                            Rating = 5,
                            ReviewText = "Rowling's debut novel is a magical adventure for all ages.",
                            ReviewerId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            Headline = "Dystopian Masterpiece",
                            Rating = 5,
                            ReviewText = "Atwood's 'The Handmaid's Tale' is a chilling vision of a dystopian future.",
                            ReviewerId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            Headline = "Australian Classic",
                            Rating = 4,
                            ReviewText = "Winton's 'Cloudstreet' is a sprawling epic of Australian life.",
                            ReviewerId = 4
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            Headline = "Beautiful and Heartbreaking",
                            Rating = 4,
                            ReviewText = "Roy's debut novel is a beautiful and heartbreaking tale of love and loss.",
                            ReviewerId = 5
                        });
                });

            modelBuilder.Entity("Server.Models.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "James",
                            LastName = "Wood"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Michiko",
                            LastName = "Kakutani"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Ron",
                            LastName = "Charles"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Maureen",
                            LastName = "Corrigan"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Dwight",
                            LastName = "Garner"
                        });
                });

            modelBuilder.Entity("Server.Models.Author", b =>
                {
                    b.HasOne("Server.Models.Country", "Country")
                        .WithMany("Authors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Server.Models.BookAuthor", b =>
                {
                    b.HasOne("Server.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Server.Models.BookCategory", b =>
                {
                    b.HasOne("Server.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Server.Models.Review", b =>
                {
                    b.HasOne("Server.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Server.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Server.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookCategories");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Server.Models.Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("Server.Models.Country", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("Server.Models.Reviewer", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
